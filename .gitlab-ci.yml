# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

variables:
  POSTGRES_USER: postgres
  POSTGRES_DB: crisp_dev
  POSTGRES_HOST_AUTH_METHOD: trust
  LICENSE_FINDER_CLI_OPTS: '--recursive'
stages:
- compliance
- test
- publish
- docs
- release

sast:
  stage: compliance
include:
- template: Security/SAST.gitlab-ci.yml
- template: Security/Dependency-Scanning.gitlab-ci.yml
- template: Security/Secret-Detection.gitlab-ci.yml  

migrate-and-test:
  services:
    - postgres:14.5
  stage: test
  variables:
    COMPOSER_ALLOW_SUPERUSER: 1
    ENVIRONMENT: development
    GIT_COMMIT: "${CI_COMMIT_SHORT_SHA}"
    POSTGRES_URI: postgres://postgres:postgres@postgres:5432/crisp_dev
    REDIS_HOST: redis
    REDIS_PORT: 6379
    REDIS_INDEX: 2
    DEFAULT_LOCALE: en
    CRISP_THEME: crisptheme
    LANG: en_US.utf8
    LOG_LEVEL: DEBUG
    HOST: ci
    PROTO: http
    TZ: UTC
  image:
    name: php:8.2-buster
  script:
  - cd cms
  - echo "# We dont need me!" > .env
  - mkdir /tmp/ci
  - cd /tmp/ci
  - apt-get update && apt-get install -y libpq-dev autoconf gcc libc6-dev make libicu-dev
    wget git-core zip zlib1g-dev libpng-dev
  - docker-php-ext-install pgsql pdo_pgsql pdo_mysql intl gd gettext
  - docker-php-ext-enable pdo_pgsql pdo_mysql intl gd gettext
  - wget https://getcomposer.org/composer-stable.phar -O /tmp/ci/composer
  - cd ${CI_PROJECT_DIR}/cms
  - php /tmp/ci/composer install
  - php bin/cli.php crisp -m
  - mv themes/basic themes/crisptheme
  - php bin/cli.php theme -i
  - rm /tmp/ci/composer
  - php vendor/bin/php-cs-fixer fix --config=../.php-cs-fixer.dist.php --dry-run --diff --format=gitlab > php-cs-fixer.json
  rules:
    - if: $CI_COMMIT_BRANCH
  artifacts:
      reports:
        codequality: php-cs-fixer.json


nightly:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint:
    - ''
  script:
  - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
    --destination "${CI_REGISTRY_IMAGE}:nightly" 
    --destination "${CI_REGISTRY_IMAGE}:latest"
    --build-arg GIT_COMMIT=${CI_COMMIT_SHORT_SHA} 
    --build-arg CI_BUILD=${CI_JOB_ID}
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

  
nightly:license:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint:
    - ''
  script:
  - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
    --destination "${CI_REGISTRY_IMAGE}/licensed:nightly" 
    --destination "${CI_REGISTRY_IMAGE}/licensed:latest"
    --build-arg GIT_COMMIT=${CI_COMMIT_SHORT_SHA} 
    --build-arg CI_BUILD=${CI_JOB_ID}
    --build-arg REQUIRE_LICENSE=true 
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

stable:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint:
    - ''
  script:
  - export TAG_MAJOR=$(echo $CI_COMMIT_TAG | cut -d. -f1)
  - export TAG_MINOR=$(echo $CI_COMMIT_TAG | cut -d. -f2)
  - export TAG_PATCH=$(echo $CI_COMMIT_TAG | cut -d. -f3)
  - export GENERATED_TAG=$(git describe --tags --always)
  - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
    --destination "${CI_REGISTRY_IMAGE}:${TAG_MAJOR}"
    --destination "${CI_REGISTRY_IMAGE}:${TAG_MAJOR}.${TAG_MINOR}"
    --destination "${CI_REGISTRY_IMAGE}:${TAG_MAJOR}.${TAG_MINOR}.${TAG_PATCH}"
    --build-arg GIT_COMMIT=${CI_COMMIT_SHORT_SHA}
    --build-arg GIT_TAG=${GENERATED_TAG}
    --build-arg CI_BUILD=${CI_JOB_ID}
    --cleanup
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'


stable:license:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint:
    - ''
  script:
  - export TAG_MAJOR=$(echo $CI_COMMIT_TAG | cut -d. -f1)
  - export TAG_MINOR=$(echo $CI_COMMIT_TAG | cut -d. -f2)
  - export TAG_PATCH=$(echo $CI_COMMIT_TAG | cut -d. -f3)
  - export GENERATED_TAG=$(git describe --tags --always)
  - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
    --destination "${CI_REGISTRY_IMAGE}/licensed:${TAG_MAJOR}"
    --destination "${CI_REGISTRY_IMAGE}/licensed:${TAG_MAJOR}.${TAG_MINOR}"
    --destination "${CI_REGISTRY_IMAGE}/licensed:${TAG_MAJOR}.${TAG_MINOR}.${TAG_PATCH}"
    --build-arg GIT_COMMIT=${CI_COMMIT_SHORT_SHA}
    --build-arg GIT_TAG=${GENERATED_TAG}
    --build-arg CI_BUILD=${CI_JOB_ID}
    --build-arg REQUIRE_LICENSE=true 
    --cleanup
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'

release-candidate:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint:
    - ''
  script:
  - export GENERATED_TAG=$(git describe --tags --always)
  - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
    --destination "${CI_REGISTRY_IMAGE}:${GENERATED_TAG}"
    --build-arg GIT_COMMIT=${CI_COMMIT_SHORT_SHA}
    --build-arg GIT_TAG=${GENERATED_TAG}
    --build-arg CI_BUILD=${CI_JOB_ID}
    --cleanup
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+\.rc\.\d+$/'

release-candidate:license:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint:
    - ''
  script:
  - export GENERATED_TAG=$(git describe --tags --always)

  - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
    --destination "${CI_REGISTRY_IMAGE}/licensed:${GENERATED_TAG}"
    --build-arg GIT_COMMIT=${CI_COMMIT_SHORT_SHA}
    --build-arg GIT_TAG=${GENERATED_TAG}
    --build-arg CI_BUILD=${CI_JOB_ID}
    --build-arg REQUIRE_LICENSE=true 
    --cleanup
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+\.rc\.\d+$/'


release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - stable
    - stable:license
  script:
    - 'echo "Releasing version ${CI_COMMIT_TAG}"'
  release:
    name: '${CI_PROJECT_TITLE} ${CI_COMMIT_TAG}'
    description: '${CI_PROJECT_DESCRIPTION}'
    tag_name: '${CI_COMMIT_TAG}'
    ref: '${CI_COMMIT_SHA}'
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'


image: tsgkadot/docker-doxygen
pages:
  stage: docs
  script:
    - doxygen Doxyfile > /dev/nul
  artifacts:
    paths:
      - public
  needs:
    - stable
    - stable:license
  environment:
    name: production
    url: https://api-ref.crispcms.de
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
