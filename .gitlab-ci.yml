# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

variables:
  POSTGRES_USER: postgres
  POSTGRES_DB: crisp_dev
  POSTGRES_HOST_AUTH_METHOD: trust
  LICENSE_FINDER_CLI_OPTS: '--recursive'
  FF_NETWORK_PER_BUILD: "true"
  CS_IMAGE: $CI_REGISTRY_IMAGE:latest
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""

services:
  - name: docker:27-dind
    alias: docker
    command:
      - "-H"
      - "tcp://0.0.0.0:2375"
      - "-H"
      - "unix:///var/run/docker.sock"




stages:
- compliance
- test
- publish
- pages
- release
- dast

sast:
  stage: compliance
include:
- template: Security/SAST.gitlab-ci.yml
- template: Security/BAS.latest.gitlab-ci.yml
- template: Security/Dependency-Scanning.gitlab-ci.yml
- template: Security/Secret-Detection.gitlab-ci.yml
- template: Security/Container-Scanning.gitlab-ci.yml
- template: Security/SAST-IaC.gitlab-ci.yml


nightly:
  stage: publish
  image: docker:27
  before_script:
    - mkdir -p ~/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > ~/.docker/config.json
    - docker buildx create --use --name ci-builder >/dev/null 2>&1 || docker buildx use ci-builder
  script:
    - set -euo pipefail
    - VERSION="$(git describe --tags --dirty --always)-nightly.${CI_JOB_ID}"
    - echo "Building Image for $VERSION"
    - docker buildx build \
        --file "${CI_PROJECT_DIR}/Dockerfile" \
        --build-arg "GIT_COMMIT=${CI_COMMIT_SHORT_SHA}" \
        --build-arg "CI_BUILD=${CI_JOB_ID}" \
        --build-arg "FRAMEWORK_VERSION=${VERSION}" \
        --tag "${CI_REGISTRY_IMAGE}:nightly" \
        --tag "${CI_REGISTRY_IMAGE}:${GENERATED_TAG}" \
        --push \
        "${CI_PROJECT_DIR}"
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG

stable:
  stage: publish
  image: docker:27
  before_script:
    - mkdir -p ~/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > ~/.docker/config.json
    - docker buildx create --use --name ci-builder >/dev/null 2>&1 || docker buildx use ci-builder
  script:
    - set -euo pipefail
    - VERSION="$(git describe --tags --dirty --always)-stable.${CI_JOB_ID}"
    - echo "Building Image for $VERSION"
    - docker buildx build \
        --file "${CI_PROJECT_DIR}/Dockerfile" \
        --build-arg "GIT_COMMIT=${CI_COMMIT_SHORT_SHA}" \
        --build-arg "GIT_TAG=${TAG_MAJOR}.${TAG_MINOR}.${TAG_PATCH}" \
        --build-arg "FRAMEWORK_VERSION=${VERSION}" \
        --build-arg "CI_BUILD=${CI_JOB_ID}" \
        --tag "${CI_REGISTRY_IMAGE}:${TAG_MAJOR}" \
        --tag "${CI_REGISTRY_IMAGE}:${TAG_MAJOR}.${TAG_MINOR}" \
        --tag "${CI_REGISTRY_IMAGE}:${TAG_MAJOR}.${TAG_MINOR}.${TAG_PATCH}" \
        --push \
        "${CI_PROJECT_DIR}"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'

release-candidate:
  stage: publish
  image: docker:27
  before_script:
    - mkdir -p ~/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > ~/.docker/config.json
    - docker buildx create --use --name ci-builder >/dev/null 2>&1 || docker buildx use ci-builder
  script:
    - set -euo pipefail
    - VERSION="$(git describe --tags --dirty --always).${CI_JOB_ID}"
    - echo "Building Image for $VERSION"
    - docker buildx build \
        --file "${CI_PROJECT_DIR}/Dockerfile" \
        --build-arg "GIT_COMMIT=${CI_COMMIT_SHORT_SHA}" \
        --build-arg "GIT_TAG=${TAG_MAJOR}.${TAG_MINOR}.${TAG_PATCH}" \
        --build-arg "FRAMEWORK_VERSION=${VERSION}" \
        --build-arg "CI_BUILD=${CI_JOB_ID}" \
        --tag "${CI_REGISTRY_IMAGE}:${GENERATED_TAG}" \
        --push \
        "${CI_PROJECT_DIR}"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+\.rc\.\d+$/'

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - stable
  script:
    - 'echo "Releasing version ${CI_COMMIT_TAG}"'
  release:
    name: '${CI_PROJECT_TITLE} ${CI_COMMIT_TAG}'
    description: '${CI_PROJECT_DESCRIPTION}'
    tag_name: '${CI_COMMIT_TAG}'
    ref: '${CI_COMMIT_SHA}'
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'